// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;

// –†–∞—Å—à–∏—Ä—è–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
tg.expand();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
tg.ready();

// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentSection = 'stat';
let userData = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(initApp, 3000);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    setInterval(updateTime, 1000);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    setInterval(updateFooterStats, 5000);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    initNavigation();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
function initApp() {
    // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
    document.getElementById('loading-screen').classList.remove('visible');
    document.getElementById('loading-screen').classList.add('hidden');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    document.getElementById('main-screen').classList.remove('hidden');
    document.getElementById('main-screen').classList.add('visible');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserData();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    showSection('stat');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –±–æ—Ç–∞
    // –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    userData = {
        username: "VaultDweller",
        level: 15,
        xp: 1250,
        xpNeeded: 2000,
        energy: 85,
        maxEnergy: 110,
        balance: 42.75,
        clan: "Brotherhood of Steel",
        referrals: 7,
        achievements: 12,
        questsCompleted: 23
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É—Ç–µ—Ä–µ
    updateFooterStats();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function updateTime() {
    const now = new Date();
    const timeString = `üïê ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
    document.getElementById('current-time').textContent = timeString;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ—É—Ç–µ—Ä–µ
function updateFooterStats() {
    if (userData) {
        // –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ "–ø–æ–º–µ—Ö"
        const randomBalance = (userData.balance + (Math.random() * 0.2 - 0.1)).toFixed(2);
        const randomClan = Math.floor(userData.clan.length + Math.random() * 5);
        
        document.getElementById('footer-balance').textContent = `BALANCE: ${randomBalance} TON`;
        document.getElementById('footer-clan').textContent = `CLAN: ${randomClan}`;
        
        // –°–ª—É—á–∞–π–Ω–æ–µ –º–µ—Ä—Ü–∞–Ω–∏–µ
        if (Math.random() > 0.7) {
            const footerItems = document.querySelectorAll('.frame-text');
            footerItems.forEach(item => {
                item.style.opacity = '0.5';
                setTimeout(() => {
                    item.style.opacity = '1';
                }, 100);
            });
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function initNavigation() {
    const navButtons = document.querySelectorAll('.nav-btn');
    
    navButtons.forEach(button => {
        button.addEventListener('click', function() {
            const section = this.getAttribute('data-section');
            showSection(section);
            
            // –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞–∂–∞—Ç–∏—è
            this.classList.add('active');
            setTimeout(() => {
                this.classList.remove('active');
            }, 300);
        });
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        button.addEventListener('mouseenter', function() {
            this.style.boxShadow = '0 0 15px #00FF00';
            this.style.transform = 'translateY(-2px)';
        });
        
        button.addEventListener('mouseleave', function() {
            this.style.boxShadow = '';
            this.style.transform = '';
        });
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª
function showSection(section) {
    currentSection = section;
    const contentArea = document.getElementById('content-area');
    
    // –û—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    contentArea.innerHTML = '';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    switch(section) {
        case 'stat':
            loadStatSection(contentArea);
            break;
        case 'wallet':
            loadWalletSection(contentArea);
            break;
        case 'runner':
            loadRunnerSection(contentArea);
            break;
        case 'shop':
            loadShopSection(contentArea);
            break;
        case 'inventory':
            loadInventorySection(contentArea);
            break;
        case 'radio':
            loadRadioSection(contentArea);
            break;
        case 'settings':
            loadSettingsSection(contentArea);
            break;
        default:
            loadStatSection(contentArea);
    }
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    const navButtons = document.querySelectorAll('.nav-btn');
    navButtons.forEach(button => {
        if (button.getAttribute('data-section') === section) {
            button.style.background = 'linear-gradient(to bottom, #004400, #002200)';
            button.style.boxShadow = '0 0 10px #00FF00';
        } else {
            button.style.background = '';
            button.style.boxShadow = '';
        }
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ STAT
function loadStatSection(container) {
    if (!userData) return;
    
    const progressPercent = Math.min(100, (userData.xp / userData.xpNeeded) * 100);
    
    container.innerHTML = `
        <div class="stat-container">
            <div class="stat-row">
                <span class="stat-label">Username:</span>
                <span class="stat-value">${userData.username}</span>
            </div>
            
            <div class="stat-row">
                <span class="stat-label">Level:</span>
                <span class="stat-value">${userData.level}</span>
            </div>
            
            <div class="stat-row">
                <span class="stat-label">XP:</span>
                <span class="stat-value">${userData.xp}/${userData.xpNeeded}</span>
            </div>
            
            <div class="progress-bar">
                <div class="progress-fill" style="width: ${progressPercent}%"></div>
            </div>
            
            <div class="stat-row">
                <span class="stat-label">Energy:</span>
                <span class="stat-value">${userData.energy}/${userData.maxEnergy}</span>
            </div>
            
            <div class="progress-bar">
                <div class="progress-fill" style="width: ${(userData.energy / userData.maxEnergy) * 100}%"></div>
            </div>
            
            <div class="stat-row">
                <span class="stat-label">Balance:</span>
                <span class="stat-value">${userData.balance} TON</span>
            </div>
            
            <div class="stat-row">
                <span class="stat-label">Clan:</span>
                <span class="stat-value">${userData.clan}</span>
            </div>
            
            <div class="stat-row">
                <span class="stat-label">Referrals:</span>
                <span class="stat-value">${userData.referrals}</span>
            </div>
            
            <div class="stat-row">
                <span class="stat-label">Achievements:</span>
                <span class="stat-value">${userData.achievements}/50</span>
            </div>
            
            <div class="stat-row">
                <span class="stat-label">Quests Completed:</span>
                <span class="stat-value">${userData.questsCompleted}</span>
            </div>
        </div>
    `;
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
function loadWalletSection(container) {
    container.innerHTML = `
        <div class="stat-container">
            <div class="stat-row">
                <span class="stat-label">Wallet Section</span>
                <span class="stat-value">Coming Soon</span>
            </div>
        </div>
    `;
}

function loadRunnerSection(container) {
    container.innerHTML = `
        <div class="stat-container">
            <div class="stat-row">
                <span class="stat-label">Runner Section</span>
                <span class="stat-value">Coming Soon</span>
            </div>
        </div>
    `;
}

function loadShopSection(container) {
    container.innerHTML = `
        <div class="stat-container">
            <div class="stat-row">
                <span class="stat-label">Shop Section</span>
                <span class="stat-value">Coming Soon</span>
            </div>
        </div>
    `;
}

function loadInventorySection(container) {
    container.innerHTML = `
        <div class="stat-container">
            <div class="stat-row">
                <span class="stat-label">Inventory Section</span>
                <span class="stat-value">Coming Soon</span>
            </div>
        </div>
    `;
}

function loadRadioSection(container) {
    container.innerHTML = `
        <div class="stat-container">
            <div class="stat-row">
                <span class="stat-label">Radio Section</span>
                <span class="stat-value">Coming Soon</span>
            </div>
        </div>
    `;
}

function loadSettingsSection(container) {
    container.innerHTML = `
        <div class="stat-container">
            <div class="stat-row">
                <span class="stat-label">Settings Section</span>
                <span class="stat-value">Coming Soon</span>
            </div>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç–∞
function sendData(action, data = {}) {
    const payload = {
        action: action,
        timestamp: new Date().getTime(),
        user: tg.initDataUnsafe.user,
        ...data
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–∞
    tg.sendData(JSON.stringify(payload));
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞
tg.onEvent('webAppDataReceived', (event) => {
    console.log('Data received from bot:', event);
    // –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞ –∑–¥–µ—Å—å
});